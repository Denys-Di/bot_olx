import TelegramBot from 'node-telegram-bot-api';
import puppeteer from 'puppeteer-core';
import chromium from '@sparticuz/chromium';
import express from 'express';
import 'dotenv/config';


// --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ---
const token = process.env.TOKEN;
const isLocal = !process.env.RENDER;
const webhookUrl = process.env.RENDER_EXTERNAL_URL;

// --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ---
const bot = new TelegramBot(token, { polling: isLocal });
const app = express();
app.use(express.json());

/*
 * --- –ö–ï–†–£–í–ê–ù–ù–Ø –°–¢–ê–ù–û–ú ---
 * –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 * messageId - ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∞–Ω–µ–ª–ª—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è, —è–∫–µ –º–∏ —Ä–µ–¥–∞–≥—É—î–º–æ.
 */
const userStates = {};

// –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—à—É–∫—É. –ö–ª—é—á - –Ω–∞–∑–≤–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏, –∑–Ω–∞—á–µ–Ω–Ω—è - —á–∞—Å—Ç–∏–Ω–∞ URL –¥–ª—è OLX.
const categories = {
    'üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏': 'elektronika/telefony-i-akcesoria',
    'üíª –ù–æ—É—Ç–±—É–∫–∏': 'elektronika/noutbuki-i-aksesuary',
    'üéß –ù–∞–≤—É—à–Ω–∏–∫–∏': 'elektronika/naushniki',
    'üéÆ –Ü–≥—Ä–æ–≤—ñ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏': 'elektronika/pristavki',
};
const categoryKeys = Object.keys(categories);

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å –Ω–∞ OLX.
 * @param {object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É: query, city, minPrice, maxPrice, sort, categoryPath.
 * @returns {Promise<Array<object>>} - –ú–∞—Å–∏–≤ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.
 */
async function searchOLX({ query, city, minPrice, maxPrice, sort, categoryPath }) {
    let browser = null;
    try {
        browser = await puppeteer.launch({
            args: chromium.args,
            executablePath: await chromium.executablePath(),
            headless: chromium.headless,
        });

        const page = await browser.newPage();
        
        const cityPath = city ? `-${city}` : '';
        let searchUrl = `https://www.olx.ua/uk/${categoryPath}/q-${encodeURIComponent(query)}${cityPath}/`;

        const searchParams = new URLSearchParams();
        if (minPrice) searchParams.set('search[filter_float_price:from]', minPrice);
        if (maxPrice) searchParams.set('search[filter_float_price:to]', maxPrice);
        if (sort) searchParams.set('search[order]', sort);
        else searchParams.set('search[order]', 'created_at:desc');
        
        const paramsString = searchParams.toString();
        if (paramsString) {
            searchUrl += `?${paramsString}`;
        }
        
        await page.goto(searchUrl, { waitUntil: 'networkidle0' });
        await page.waitForSelector('div[data-cy="l-card"]', { timeout: 15000 });

        const results = await page.evaluate(() => {
            const items = [];
            const cards = document.querySelectorAll('div[data-cy="l-card"]');
            cards.forEach((el, i) => {
                if (i >= 20) return;
                const title = el.querySelector('h6')?.innerText || '‚Äî';
                const price = el.querySelector('[data-testid="ad-price"]')?.innerText || '–¶—ñ–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
                let link = el.querySelector('a')?.getAttribute('href') || '#';
                if (link.startsWith('/')) {
                    link = `https://www.olx.ua${link}`;
                }
                const image = el.querySelector('img')?.src || null;
                if (title && link !== '#') {
                    items.push({ title, price, link, image });
                }
            });
            return items;
        });

        return results;
    } finally {
        if (browser) await browser.close();
    }
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
 * @param {number} chatId - ID —á–∞—Ç—É.
 * @param {Array<object>} results - –ú–∞—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑ searchOLX.
 */
async function sendResults(chatId, results) {
    if (results.length > 0) {
        await bot.sendMessage(chatId, `‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${results.length} –æ–≥–æ–ª–æ—à–µ–Ω—å. –í—ñ–¥–ø—Ä–∞–≤–ª—è—é...`);
        for (const item of results) {
            const msgText = `üìå *${item.title}*\nüíµ *${item.price}*\nüîó [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏](${item.link})`;
            try {
                if (item.image) {
                    await bot.sendPhoto(chatId, item.image, { caption: msgText, parse_mode: 'Markdown' });
                } else {
                    await bot.sendMessage(chatId, msgText, { parse_mode: 'Markdown' });
                }
            } catch (error) {
                console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: ${error.message}`);
                await bot.sendMessage(chatId, msgText, { parse_mode: 'Markdown' });
            }
        }
    } else {
        await bot.sendMessage(chatId, 'üòï –ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }
}

// --- –§–£–ù–ö–¶–Ü–á-–•–ï–õ–ü–ï–†–ò –î–õ–Ø –Ü–ù–¢–ï–†–§–ï–ô–°–£ ---

/** –ì–µ–Ω–µ—Ä—É—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞–Ω—É. */
function buildSearchMessage(state) {
    let text = 'üîç *–ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫–æ–º*\n\n';
    text += `*–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:* ${state.categoryName || '–Ω–µ –æ–±—Ä–∞–Ω–æ'}\n`;
    text += `*–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ:* ${state.keyword || '–Ω–µ –≤–≤–µ–¥–µ–Ω–æ'}\n`;
    text += `*–ú—ñ—Å—Ç–æ:* ${state.city || '–Ω–µ –≤–≤–µ–¥–µ–Ω–æ'}\n`;
    text += `*–¶—ñ–Ω–∞:* ${state.minPrice || state.maxPrice ? `${state.minPrice || '0'} - ${state.maxPrice || '‚àû'}` : '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
    const sortText = state.sort === 'price:asc' ? '–í—ñ–¥ –¥–µ—à–µ–≤–∏—Ö' : state.sort === 'price:desc' ? '–í—ñ–¥ –¥–æ—Ä–æ–≥–∏—Ö' : '–∑–∞ –¥–∞—Ç–æ—é (–Ω–æ–≤—ñ—à—ñ)';
    text += `*–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:* ${sortText}\n\n`;
    text += `–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏. –ö–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—à—É–∫".`;
    return text;
}

/** –ì–µ–Ω–µ—Ä—É—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞–Ω—É. */
function buildSearchKeyboard(state) {
    const keyboard = [
        [{ text: `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${state.categoryName || '‚ùì'}`, callback_data: 'set_category' }],
        [{ text: `–°–ª–æ–≤–æ: ${state.keyword || '‚ùì'}`, callback_data: 'set_keyword' }, { text: `–ú—ñ—Å—Ç–æ: ${state.city || '‚ùì'}`, callback_data: 'set_city' }],
        [{ text: `–¶—ñ–Ω–∞: ${state.minPrice ? 'üí∞' : '‚ùì'}`, callback_data: 'set_price' }, { text: `–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: ${state.sort ? 'üìà' : 'üóìÔ∏è'}`, callback_data: 'set_sort' }],
        [{ text: 'üöÄ –ü–æ—à—É–∫', callback_data: 'search' }]
    ];
    return keyboard;
}

/** –û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∞–Ω–µ–ª–ª—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è. */
async function updateSearchPanel(chatId) {
    const state = userStates[chatId];
    if (!state || !state.messageId) return;

    const text = buildSearchMessage(state);
    const keyboard = buildSearchKeyboard(state);

    try {
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: state.messageId,
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        });
    } catch (e) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", e.message);
    }
}

// --- –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î –¢–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ---

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    
    userStates[chatId] = {
        stage: 'configuring',
        categoryName: null,
        categoryPath: null,
        keyword: null,
        city: null,
        minPrice: null,
        maxPrice: null,
        sort: null,
        messageId: null
    };

    const text = buildSearchMessage(userStates[chatId]);
    const keyboard = buildSearchKeyboard(userStates[chatId]);

    const sentMessage = await bot.sendMessage(chatId, text, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    });
    
    userStates[chatId].messageId = sentMessage.message_id;
});

// –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö)
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥—É /start —Ç—É—Ç, –±–æ –¥–ª—è –Ω–µ—ó —î –æ–∫—Ä–µ–º–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    if (text === '/start') return;

    const state = userStates[chatId];
    if (!state || !state.stage.startsWith('awaiting_')) return;

    switch (state.stage) {
        case 'awaiting_keyword':
            state.keyword = text;
            break;
        case 'awaiting_city':
            state.city = text.toLowerCase().trim();
            break;
        case 'awaiting_price':
            const match = text.match(/(\d+)\s*-\s*(\d+)/);
            if (match) {
                state.minPrice = match[1];
                state.maxPrice = match[2];
            } else {
                bot.sendMessage(chatId, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `1000-5000`").then(m => setTimeout(() => bot.deleteMessage(chatId, m.message_id), 3000));
            }
            break;
    }
    
    state.stage = 'configuring';
    try {
        await bot.deleteMessage(chatId, msg.message_id);
    } catch (e) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", e.message);
    }
    updateSearchPanel(chatId);
});

// –ì–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.callback_data;
    const state = userStates[chatId];

    if (!state) {
        bot.answerCallbackQuery(query.id, { text: '–°–µ—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start', show_alert: true });
        return;
    }
    
    if (!data.startsWith('category_')) state.stage = 'configuring';

    if (data === 'set_category') {
        const categoryKeyboard = categoryKeys.map(key => ([{ text: key, callback_data: `category_${categories[key]}|${key}` }]));
        await bot.editMessageReplyMarkup({ inline_keyboard: categoryKeyboard }, { chat_id: chatId, message_id: state.messageId });
    } else if (data.startsWith('category_')) {
        const [path, name] = data.replace('category_', '').split('|');
        state.categoryPath = path;
        state.categoryName = name;
        await updateSearchPanel(chatId);
    } else if (data === 'set_keyword') {
        state.stage = 'awaiting_keyword';
        bot.sendMessage(chatId, "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ:").then(m => setTimeout(() => bot.deleteMessage(chatId, m.message_id).catch(e => {}), 10000));
    } else if (data === 'set_city') {
        state.stage = 'awaiting_city';
        bot.sendMessage(chatId, "üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ—é (–Ω–∞–ø—Ä., `kiev`):").then(m => setTimeout(() => bot.deleteMessage(chatId, m.message_id).catch(e => {}), 10000));
    } else if (data === 'set_price') {
        state.stage = 'awaiting_price';
        bot.sendMessage(chatId, "üí∞ –í–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω–∏ (–Ω–∞–ø—Ä., `2000-8000`):").then(m => setTimeout(() => bot.deleteMessage(chatId, m.message_id).catch(e => {}), 10000));
    } else if (data === 'set_sort') {
        const sortKeyboard = [
            [{ text: '–°–ø–æ—á–∞—Ç–∫—É –Ω–æ–≤—ñ—à—ñ', callback_data: 'sort_created_at:desc' }],
            [{ text: '–°–ø–æ—á–∞—Ç–∫—É –¥–µ—à–µ–≤—à—ñ', callback_data: 'sort_price:asc' }],
            [{ text: '–°–ø–æ—á–∞—Ç–∫—É –¥–æ—Ä–æ–∂—á—ñ', callback_data: 'sort_price:desc' }],
        ];
        await bot.editMessageReplyMarkup({ inline_keyboard: sortKeyboard }, { chat_id: chatId, message_id: state.messageId });
    } else if (data.startsWith('sort_')) {
        state.sort = data.replace('sort_', '');
        await updateSearchPanel(chatId);
    } else if (data === 'search') {
        if (!state.categoryPath || !state.keyword) {
            bot.answerCallbackQuery(query.id, { text: '‚ùóÔ∏è –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ!', show_alert: true });
            return;
        }
        await bot.editMessageText('‚è≥ *–î–æ–±—Ä–µ, —à—É–∫–∞—é...*\n–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 30 —Å–µ–∫—É–Ω–¥.', { chat_id: chatId, message_id: state.messageId, parse_mode: 'Markdown' });
        try {
            const results = await searchOLX({
                query: state.keyword,
                city: state.city,
                minPrice: state.minPrice,
                maxPrice: state.maxPrice,
                sort: state.sort,
                categoryPath: state.categoryPath
            });
            await sendResults(chatId, results);
        } catch (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –Ω–∞ OLX:', err);
            await bot.sendMessage(chatId, `‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É. –ú–æ–∂–ª–∏–≤–æ, —Å—Ç–æ—Ä—ñ–Ω–∫–∞ OLX –∑–º—ñ–Ω–∏–ª–∞—Å—å –∞–±–æ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î.\n\n_${err.message}_`, {parse_mode: 'Markdown'});
        } finally {
            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ—à—É–∫—É
            await updateSearchPanel(chatId);
        }
    }
    
    bot.answerCallbackQuery(query.id);
});

// --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–ï–†–í–ï–†–ê (–¥–ª—è Render) ---
if (!isLocal) {
    const webhookPath = `/webhook${token}`;
    const fullUrl = `${webhookUrl}${webhookPath}`;
    bot.setWebhook(fullUrl);
    app.post(webhookPath, (req, res) => {
        bot.processUpdate(req.body);
        res.sendStatus(200);
    });
    const port = process.env.PORT || 3000;
    app.listen(port, () => console.log(`üöÄ –í–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ ${port}`));
} else {
    console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ polling');
}